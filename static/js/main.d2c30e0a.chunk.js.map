{"version":3,"sources":["actions/index.js","components/AddTodoBar.jsx","images/icon-cross.svg","utils/index.js","components/Todo.jsx","components/TodoList.jsx","components/FilterBar.jsx","images/icon-moon.svg","images/icon-sun.svg","components/App.jsx","reducers/todoReducer.js","reducers/index.js","reducers/darkModeReducer.js","index.jsx"],"names":["addTodo","todoValue","type","payload","id","uuidv4","value","isCompleted","AddTodoBar","handleInputChange","event","setState","newTodo","target","handleFormSubmit","preventDefault","state","addTodoAction","props","this","className","onSubmit","onChange","React","Component","connect","getThemeClass","isDarkMode","getFromLocalStorage","key","savedTodos","window","localStorage","getItem","JSON","parse","saveToLocalStorage","setItem","stringify","Todo","index","toggleTodoAction","deleteTodoAction","draggableId","provided","undefined","draggableProps","dragHandleProps","ref","innerRef","name","defaultChecked","onClick","htmlFor","src","crossIcon","alt","TodoList","handleOnDragEnd","result","destination","source","reorderTodosAction","completeItemsCount","filterType","todos","length","map","incompleteItemsCount","clearCompletedTodosAction","onDragEnd","droppableId","droppableProps","generateTodos","placeholder","filteredTodos","reduce","sum","todo","filter","sourceIndex","destinationIndex","setFilterType","isActiveFilter","buttonType","App","toggleDarkModeAction","lightModeIcon","darkModeIcon","toggleTodo","todoIndex","foundTodo","find","todoCopy","splice","unshift","reorderTodos","combineReducers","action","ReactDOM","render","store","createStore","reducers","document","querySelector"],"mappings":"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","file":"static/js/main.d2c30e0a.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nexport function addTodo(todoValue) {\n  return {\n    type: 'ADD_TODO',\n    payload: {\n      id: uuidv4(),\n      value: todoValue,\n      isCompleted: false,\n    },\n  };\n}\n\nexport function deleteTodo(id) {\n  return {\n    type: 'DELETE_TODO',\n    payload: {\n      id,\n    },\n  };\n}\n\nexport function toggleTodo(id) {\n  return {\n    type: 'TOGGLE_TODO',\n    payload: {\n      id,\n    },\n  };\n}\n\nexport function clearCompletedTodos() {\n  return {\n    type: 'CLEAR_COMPLETED_TODOS',\n  };\n}\n\nexport function reorderTodos(sourceIndex, destinationIndex) {\n  return {\n    type: 'REORDER_TODOS',\n    payload: {\n      sourceIndex,\n      destinationIndex,\n    },\n  };\n}\n\nexport function toggleDarkMode() {\n  return {\n    type: 'TOGGLE_DARK_MODE',\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\n\nclass AddTodoBar extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      newTodo: '',\n    };\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ newTodo: event.target.value });\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { newTodo } = this.state;\n    const { addTodoAction } = this.props;\n    if (newTodo) {\n      addTodoAction(newTodo);\n    }\n    this.setState({ newTodo: '' });\n  };\n\n  render() {\n    const { newTodo } = this.state;\n    return (\n      <form className=\"container\" onSubmit={this.handleFormSubmit}>\n        <input type=\"text\" value={newTodo} onChange={this.handleInputChange} />\n      </form>\n    );\n  }\n}\n\nAddTodoBar.propTypes = {\n  addTodoAction: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { addTodoAction: addTodo })(AddTodoBar);\n","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","export function getThemeClass(className, isDarkMode) {\n  if (isDarkMode) {\n    return `${className}--dark`;\n  }\n  return `${className}--light`;\n}\n\nexport function somFunc() {}\n\nexport function getFromLocalStorage(key) {\n  const savedTodos = window.localStorage.getItem(key);\n  if (savedTodos) {\n    return JSON.parse(savedTodos);\n  }\n\n  return undefined;\n}\n\nexport function saveToLocalStorage(key, value) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n  return value;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { connect } from 'react-redux';\nimport crossIcon from '../images/icon-cross.svg';\nimport { getThemeClass } from '../utils';\nimport { toggleTodo, deleteTodo } from '../actions';\n\nclass Todo extends React.Component {\n  render() {\n    const {\n      id,\n      index,\n      value,\n      isCompleted,\n      toggleTodoAction,\n      deleteTodoAction,\n      isDarkMode,\n    } = this.props;\n\n    return (\n      <Draggable key={id} draggableId={id} index={index}>\n        {(provided) => (\n          <div\n            id={id}\n            className={`todo flex ${getThemeClass('todo', isDarkMode)} ${\n              isCompleted ? 'todo--completed' : undefined\n            }`}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n          >\n            <input\n              type=\"checkbox\"\n              id={id}\n              name=\"todo\"\n              defaultChecked={isCompleted}\n              onClick={() => toggleTodoAction(id)}\n            />\n            <label htmlFor={id}>{value}</label>\n            <button type=\"button\" className=\"todo--delete\" onClick={() => deleteTodoAction(id)}>\n              <img src={crossIcon} alt=\"Delete todo\" />\n            </button>\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nTodo.propTypes = {\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  toggleTodoAction: PropTypes.func.isRequired,\n  deleteTodoAction: PropTypes.func.isRequired,\n  isDarkMode: PropTypes.bool.isRequired,\n};\n\nfunction mapStateToProps({ isDarkMode }) {\n  return {\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  toggleTodoAction: toggleTodo,\n  deleteTodoAction: deleteTodo,\n})(Todo);\n","import { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Todo from './Todo';\nimport { getThemeClass } from '../utils';\nimport { addTodo, clearCompletedTodos, reorderTodos } from '../actions';\n\nclass TodoList extends React.Component {\n  handleOnDragEnd = (result) => {\n    const { destination, source } = result;\n    if (!destination) {\n      return;\n    }\n    const {\n      reorderTodosAction, completeItemsCount, filterType,\n    } = this.props;\n\n    if (filterType === 'INCOMPLETE' && completeItemsCount) {\n      reorderTodosAction(\n        source.index + (completeItemsCount),\n        destination.index + (completeItemsCount),\n      );\n    } else {\n      reorderTodosAction(source.index, destination.index);\n    }\n  };\n\n  generateTodos() {\n    const { todos, isDarkMode } = this.props;\n\n    if (todos.length === 0) {\n      return (\n        <div className={`empty-todo-list ${getThemeClass('empty-todo-list', isDarkMode)}`}>\n          <h1>No Tasks!</h1>\n        </div>\n      );\n    }\n\n    return todos.map(({ id, value, isCompleted }, index) => (\n      <Todo id={id} key={id} isCompleted={isCompleted} value={value} index={index} />\n    ));\n  }\n\n  render() {\n    const { incompleteItemsCount, clearCompletedTodosAction, isDarkMode } = this.props;\n    return (\n      <DragDropContext onDragEnd={this.handleOnDragEnd}>\n        <Droppable droppableId=\"todos\">\n          {(provided) => (\n            <div className=\"todo-list\" {...provided.droppableProps} ref={provided.innerRef}>\n              <div>{this.generateTodos()}</div>\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n        <div className={`flex todos-left ${getThemeClass('todos-left', isDarkMode)}`}>\n          <span>\n            {incompleteItemsCount}\n            {' '}\n            items left\n          </span>\n          <button type=\"button\" onClick={clearCompletedTodosAction}>\n            Clear Completed\n          </button>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  incompleteItemsCount: PropTypes.number.isRequired,\n  completeItemsCount: PropTypes.number.isRequired,\n  reorderTodosAction: PropTypes.func.isRequired,\n  clearCompletedTodosAction: PropTypes.func.isRequired,\n  isDarkMode: PropTypes.bool.isRequired,\n  filterType: PropTypes.string.isRequired,\n};\n\nfunction mapStateToProps({ todos, isDarkMode }, { filterType }) {\n  const incompleteItemsCount = todos.reduce((sum, todo) => (!todo.isCompleted ? sum + 1 : sum), 0);\n  const completeItemsCount = todos.length - incompleteItemsCount;\n  let filteredTodos;\n\n  switch (filterType) {\n    case 'COMPLETED':\n      filteredTodos = todos.filter((todo) => todo.isCompleted);\n      break;\n\n    case 'INCOMPLETE':\n      filteredTodos = todos.filter((todo) => !todo.isCompleted);\n      break;\n\n    default:\n      filteredTodos = todos;\n  }\n\n  return {\n    todos: filteredTodos,\n    incompleteItemsCount,\n    completeItemsCount,\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  addTodoAction: addTodo,\n  clearCompletedTodosAction: clearCompletedTodos,\n  reorderTodosAction: reorderTodos,\n})(TodoList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getThemeClass } from '../utils';\n\nfunction FilterBar({ setFilterType, filterType, isDarkMode }) {\n  const isActiveFilter = (buttonType) => buttonType === filterType;\n\n  return (\n    <div className={`filter-bar flex ${getThemeClass('filter-bar', isDarkMode)}`}>\n      <button\n        type=\"button\"\n        className={`${isActiveFilter('all') ? 'active-filter' : undefined} ${getThemeClass(\n          'button',\n          isDarkMode,\n        )}`}\n        onClick={() => setFilterType('all')}\n      >\n        All\n      </button>\n      <button\n        type=\"button\"\n        className={`${isActiveFilter('active') ? 'active-filter' : undefined} ${getThemeClass(\n          'button',\n          isDarkMode,\n        )}`}\n        onClick={() => setFilterType('INCOMPLETE')}\n      >\n        Active\n      </button>\n      <button\n        type=\"button\"\n        className={`${isActiveFilter('completed') ? 'active-filter' : undefined} ${getThemeClass(\n          'button',\n          isDarkMode,\n        )}`}\n        onClick={() => setFilterType('COMPLETED')}\n      >\n        Completed\n      </button>\n    </div>\n  );\n}\n\nFilterBar.propTypes = {\n  setFilterType: PropTypes.func.isRequired,\n  filterType: PropTypes.string.isRequired,\n  isDarkMode: PropTypes.bool.isRequired,\n};\n\nfunction mapStateToProps({ isDarkMode }) {\n  return {\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps)(FilterBar);\n","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport AddTodoBar from './AddTodoBar';\nimport TodoList from './TodoList';\nimport FilterBar from './FilterBar';\nimport './style.css';\nimport darkModeIcon from '../images/icon-moon.svg';\nimport lightModeIcon from '../images/icon-sun.svg';\nimport { getThemeClass } from '../utils';\nimport { toggleDarkMode } from '../actions';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      filterType: 'ALL',\n    };\n  }\n\n  setFilterType = (filterType) => {\n    this.setState({ filterType });\n  };\n\n  render() {\n    const { filterType } = this.state;\n    const { isDarkMode, toggleDarkModeAction } = this.props;\n\n    return (\n      <div className={`wrapper ${getThemeClass('wrapper', isDarkMode)}`}>\n        <header className={`${getThemeClass('header', isDarkMode)}`}>\n          <nav className=\"container flex\">\n            <h1>TODO</h1>\n            <button type=\"button\" onClick={toggleDarkModeAction}>\n              <img src={isDarkMode ? lightModeIcon : darkModeIcon} alt=\"dark mode\" />\n            </button>\n          </nav>\n          <AddTodoBar addTodo={this.addTodo} />\n        </header>\n        <main className=\"container\">\n          <TodoList filterType={filterType} />\n          <FilterBar\n            setFilterType={this.setFilterType}\n            filterType={filterType}\n          />\n        </main>\n        <footer className=\"container\">\n          <p>Drag and drop to reorder list</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  isDarkMode: PropTypes.bool.isRequired,\n  toggleDarkModeAction: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps({ isDarkMode }) {\n  return {\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps, { toggleDarkModeAction: toggleDarkMode })(App);\n","import { getFromLocalStorage, saveToLocalStorage } from '../utils';\n\nexport default function todoReducer(todos = getFromLocalStorage('todos') || [], { type, payload }) {\n  switch (type) {\n    case 'ADD_TODO':\n      return saveToLocalStorage('todos', [...todos, payload]);\n\n    case 'DELETE_TODO':\n      return saveToLocalStorage('todos', todos.filter((todo) => todo.id !== payload.id));\n\n    case 'TOGGLE_TODO':\n      return saveToLocalStorage('todos', toggleTodo(todos, payload.id));\n\n    case 'CLEAR_COMPLETED_TODOS':\n      return saveToLocalStorage('todos', todos.filter((todo) => todo.isCompleted === false));\n\n    case 'REORDER_TODOS':\n      return saveToLocalStorage('todos', reorderTodos(todos, payload.sourceIndex, payload.destinationIndex));\n\n    default:\n      return todos;\n  }\n}\n\nfunction toggleTodo(todos, id) {\n  let todoIndex;\n  const foundTodo = todos.find((todo, index) => {\n    todoIndex = index;\n    return todo.id === id;\n  });\n  foundTodo.isCompleted = !foundTodo.isCompleted;\n\n  const todoCopy = [...todos];\n  todoCopy.splice(todoIndex, 1);\n  todoCopy.unshift(foundTodo);\n  return todoCopy;\n}\n\nfunction reorderTodos(todos, sourceIndex, destinationIndex) {\n  const todoCopy = [...todos];\n  todoCopy.splice(sourceIndex, 1);\n  todoCopy.splice(destinationIndex, 0, todos[sourceIndex]);\n\n  return todoCopy;\n}\n","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer';\nimport darkModeReducer from './darkModeReducer';\n\nexport default combineReducers({ todos: todoReducer, isDarkMode: darkModeReducer });\n","import { getFromLocalStorage, saveToLocalStorage } from '../utils';\n\nexport default function todoReducer(isDarkMode = getFromLocalStorage('isDarkMode') || false, action) {\n  if (action.type === 'TOGGLE_DARK_MODE') {\n    return saveToLocalStorage('isDarkMode', !isDarkMode);\n  }\n\n  return isDarkMode;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport reducers from './reducers';\n\nReactDOM.render(\n  <Provider store={createStore(reducers)}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}