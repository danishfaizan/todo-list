{"version":3,"sources":["actions/index.js","components/AddTodoBar.jsx","images/icon-cross.svg","utils/index.js","components/Todo.jsx","components/TodoList.jsx","components/FilterBar.jsx","images/icon-moon.svg","images/icon-sun.svg","components/App.jsx","reducers/todoReducer.js","reducers/index.js","reducers/darkModeReducer.js","index.jsx"],"names":["addTodo","todoValue","type","payload","id","uuidv4","value","isCompleted","connect","addTodoAction","props","useState","newTodo","setNewTodo","className","onSubmit","event","preventDefault","filterType","setFilterType","onChange","target","getThemeClass","isDarkMode","getFromLocalStorage","key","savedTodos","window","localStorage","getItem","JSON","parse","saveToLocalStorage","setItem","stringify","toggleTodoAction","deleteTodoAction","updateTodoAction","index","inputValue","setInputValue","handleInputChange","handleEnter","blur","draggableId","provided","undefined","draggableProps","dragHandleProps","ref","innerRef","name","defaultChecked","onClick","onKeyPress","src","crossIcon","alt","filteredTodos","todos","incompleteItemsCount","reduce","sum","todo","completeItemsCount","length","filter","clearCompletedTodosAction","reorderTodosAction","sourceIndex","destinationIndex","onDragEnd","result","destination","source","droppableId","droppableProps","map","placeholder","isActiveFilter","buttonType","toggleDarkModeAction","lightModeIcon","darkModeIcon","toggleTodo","todoIndex","foundTodo","find","todoCopy","splice","push","reorderTodos","combineReducers","action","ReactDOM","render","store","createStore","reducers","document","querySelector"],"mappings":"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","file":"static/js/main.310464f6.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nexport function addTodo(todoValue) {\n  return {\n    type: 'ADD_TODO',\n    payload: {\n      id: uuidv4(),\n      value: todoValue,\n      isCompleted: false,\n    },\n  };\n}\n\nexport function deleteTodo(id) {\n  return {\n    type: 'DELETE_TODO',\n    payload: {\n      id,\n    },\n  };\n}\n\nexport function updateTodo(id, todoValue) {\n  return {\n    type: 'UPDATE_TODO',\n    payload: {\n      id,\n      value: todoValue,\n    },\n  };\n}\n\nexport function toggleTodo(id) {\n  return {\n    type: 'TOGGLE_TODO',\n    payload: {\n      id,\n    },\n  };\n}\n\nexport function clearCompletedTodos() {\n  return {\n    type: 'CLEAR_COMPLETED_TODOS',\n  };\n}\n\nexport function reorderTodos(sourceIndex, destinationIndex) {\n  return {\n    type: 'REORDER_TODOS',\n    payload: {\n      sourceIndex,\n      destinationIndex,\n    },\n  };\n}\n\nexport function toggleDarkMode() {\n  return {\n    type: 'TOGGLE_DARK_MODE',\n  };\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\n\nfunction AddTodoBar(props) {\n  const [newTodo, setNewTodo] = useState('');\n\n  const handleInputChange = (event) => {\n    setNewTodo(event.target.value);\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { addTodoAction, filterType, setFilterType } = props;\n    if (newTodo) {\n      addTodoAction(newTodo);\n    }\n    setNewTodo('');\n\n    if (filterType === 'COMPLETED') {\n      setFilterType('ALL');\n    }\n  };\n\n  return (\n    <form className=\"container\" onSubmit={handleFormSubmit}>\n      <input type=\"text\" value={newTodo} onChange={handleInputChange} />\n    </form>\n  );\n}\n\nAddTodoBar.propTypes = {\n  addTodoAction: PropTypes.func.isRequired,\n  filterType: PropTypes.string.isRequired,\n  setFilterType: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { addTodoAction: addTodo })(AddTodoBar);\n","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","export function getThemeClass(className, isDarkMode) {\n  if (isDarkMode) {\n    return `${className}--dark`;\n  }\n  return `${className}--light`;\n}\n\nexport function somFunc() {}\n\nexport function getFromLocalStorage(key) {\n  const savedTodos = window.localStorage.getItem(key);\n  if (savedTodos) {\n    return JSON.parse(savedTodos);\n  }\n\n  return undefined;\n}\n\nexport function saveToLocalStorage(key, value) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n  return value;\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { connect } from 'react-redux';\nimport crossIcon from '../images/icon-cross.svg';\nimport { getThemeClass } from '../utils';\nimport { toggleTodo, deleteTodo, updateTodo } from '../actions';\n\nfunction Todo(props) {\n  const {\n    id,\n    index,\n    value,\n    isCompleted,\n    toggleTodoAction,\n    deleteTodoAction,\n    isDarkMode,\n    updateTodoAction,\n  } = props;\n\n  const [inputValue, setInputValue] = useState(value);\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n    updateTodoAction(id, event.target.value);\n  };\n\n  const handleEnter = (event) => {\n    if (event.key === 'Enter') {\n      event.target.blur();\n    }\n  };\n\n  return (\n    <Draggable key={id} draggableId={id} index={index}>\n      {(provided) => (\n        <div\n          id={id}\n          className={`todo flex ${getThemeClass('todo', isDarkMode)} ${\n            isCompleted ? 'todo--completed' : undefined\n          }`}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <input\n            type=\"checkbox\"\n            id={id}\n            name=\"todo\"\n            defaultChecked={isCompleted}\n            onClick={() => toggleTodoAction(id)}\n          />\n          <textarea\n            className={`todo-text ${getThemeClass('todo-text', isDarkMode)}`}\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            onKeyPress={handleEnter}\n          />\n          <button type=\"button\" className=\"todo--delete\" onClick={() => deleteTodoAction(id)}>\n            <img src={crossIcon} alt=\"Delete todo\" />\n          </button>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\nTodo.propTypes = {\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  toggleTodoAction: PropTypes.func.isRequired,\n  deleteTodoAction: PropTypes.func.isRequired,\n  isDarkMode: PropTypes.bool.isRequired,\n  updateTodoAction: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps({ isDarkMode }) {\n  return {\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  toggleTodoAction: toggleTodo,\n  deleteTodoAction: deleteTodo,\n  updateTodoAction: updateTodo,\n})(Todo);\n","import { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Todo from './Todo';\nimport { getThemeClass } from '../utils';\nimport { addTodo, clearCompletedTodos, reorderTodos } from '../actions';\n\nfunction TodoList(props) {\n  const {\n    filterType,\n    incompleteItemsCount,\n    completeItemsCount,\n    clearCompletedTodosAction,\n    isDarkMode,\n    reorderTodosAction,\n    todos,\n  } = props;\n\n  const handleOnDragEnd = (result) => {\n    const { destination, source } = result;\n    if (!destination) {\n      return;\n    }\n\n    if (filterType === 'INCOMPLETE' && completeItemsCount) {\n      reorderTodosAction(source.index + completeItemsCount, destination.index + completeItemsCount);\n    } else {\n      reorderTodosAction(source.index, destination.index);\n    }\n  };\n\n  function generateTodos() {\n    if (todos.length === 0) {\n      return (\n        <div className={`empty-todo-list ${getThemeClass('empty-todo-list', isDarkMode)}`}>\n          <h1>No Tasks!</h1>\n        </div>\n      );\n    }\n\n    return todos.map(({ id, value, isCompleted }, index) => (\n      <Todo id={id} key={id} isCompleted={isCompleted} value={value} index={index} />\n    ));\n  }\n\n  return (\n    <DragDropContext onDragEnd={handleOnDragEnd}>\n      <Droppable droppableId=\"todos\">\n        {(provided) => (\n          <div className=\"todo-list\" {...provided.droppableProps} ref={provided.innerRef}>\n            <div>{generateTodos()}</div>\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n      <div className={`flex todos-left ${getThemeClass('todos-left', isDarkMode)}`}>\n        <span>\n          {incompleteItemsCount}\n          {' '}\n          items left\n        </span>\n        <button type=\"button\" onClick={clearCompletedTodosAction}>\n          Clear Completed\n        </button>\n      </div>\n    </DragDropContext>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  incompleteItemsCount: PropTypes.number.isRequired,\n  completeItemsCount: PropTypes.number.isRequired,\n  reorderTodosAction: PropTypes.func.isRequired,\n  clearCompletedTodosAction: PropTypes.func.isRequired,\n  isDarkMode: PropTypes.bool.isRequired,\n  filterType: PropTypes.string.isRequired,\n};\n\nfunction mapStateToProps({ todos, isDarkMode }, { filterType }) {\n  const incompleteItemsCount = todos.reduce((sum, todo) => (!todo.isCompleted ? sum + 1 : sum), 0);\n  const completeItemsCount = todos.length - incompleteItemsCount;\n  let filteredTodos;\n\n  switch (filterType) {\n    case 'COMPLETED':\n      filteredTodos = todos.filter((todo) => todo.isCompleted);\n      break;\n\n    case 'INCOMPLETE':\n      filteredTodos = todos.filter((todo) => !todo.isCompleted);\n      break;\n\n    default:\n      filteredTodos = todos;\n  }\n\n  return {\n    todos: filteredTodos,\n    incompleteItemsCount,\n    completeItemsCount,\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  addTodoAction: addTodo,\n  clearCompletedTodosAction: clearCompletedTodos,\n  reorderTodosAction: reorderTodos,\n})(TodoList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getThemeClass } from '../utils';\n\nfunction FilterBar({ setFilterType, filterType, isDarkMode }) {\n  const isActiveFilter = (buttonType) => buttonType === filterType;\n\n  return (\n    <div className={`filter-bar flex ${getThemeClass('filter-bar', isDarkMode)}`}>\n      <button\n        type=\"button\"\n        className={`${isActiveFilter('all') ? 'active-filter' : undefined} ${getThemeClass(\n          'button',\n          isDarkMode,\n        )}`}\n        onClick={() => setFilterType('all')}\n      >\n        All\n      </button>\n      <button\n        type=\"button\"\n        className={`${isActiveFilter('active') ? 'active-filter' : undefined} ${getThemeClass(\n          'button',\n          isDarkMode,\n        )}`}\n        onClick={() => setFilterType('INCOMPLETE')}\n      >\n        Active\n      </button>\n      <button\n        type=\"button\"\n        className={`${isActiveFilter('completed') ? 'active-filter' : undefined} ${getThemeClass(\n          'button',\n          isDarkMode,\n        )}`}\n        onClick={() => setFilterType('COMPLETED')}\n      >\n        Completed\n      </button>\n    </div>\n  );\n}\n\nFilterBar.propTypes = {\n  setFilterType: PropTypes.func.isRequired,\n  filterType: PropTypes.string.isRequired,\n  isDarkMode: PropTypes.bool.isRequired,\n};\n\nfunction mapStateToProps({ isDarkMode }) {\n  return {\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps)(FilterBar);\n","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport AddTodoBar from './AddTodoBar';\nimport TodoList from './TodoList';\nimport FilterBar from './FilterBar';\nimport './style.css';\nimport darkModeIcon from '../images/icon-moon.svg';\nimport lightModeIcon from '../images/icon-sun.svg';\nimport { getThemeClass } from '../utils';\nimport { toggleDarkMode } from '../actions';\n\nfunction App({ isDarkMode, toggleDarkModeAction }) {\n  const [filterType, setFilterType] = useState('ALL');\n\n  return (\n    <div className={`wrapper ${getThemeClass('wrapper', isDarkMode)}`}>\n      <header className={`${getThemeClass('header', isDarkMode)}`}>\n        <nav className=\"container flex\">\n          <h1>TODO</h1>\n          <button type=\"button\" onClick={toggleDarkModeAction}>\n            <img src={isDarkMode ? lightModeIcon : darkModeIcon} alt=\"dark mode\" />\n          </button>\n        </nav>\n        <AddTodoBar filterType={filterType} setFilterType={setFilterType} />\n      </header>\n      <main className=\"container main\">\n        <TodoList filterType={filterType} />\n        <FilterBar setFilterType={setFilterType} filterType={filterType} />\n      </main>\n      <footer className=\"container\">\n        <p>Drag and drop to reorder list</p>\n      </footer>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  isDarkMode: PropTypes.bool.isRequired,\n  toggleDarkModeAction: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps({ isDarkMode }) {\n  return {\n    isDarkMode,\n  };\n}\n\nexport default connect(mapStateToProps, { toggleDarkModeAction: toggleDarkMode })(App);\n","import { getFromLocalStorage, saveToLocalStorage } from '../utils';\n\nexport default function todoReducer(todos = getFromLocalStorage('todos') || [], { type, payload }) {\n  switch (type) {\n    case 'ADD_TODO':\n      return saveToLocalStorage('todos', [payload, ...todos]);\n\n    case 'DELETE_TODO':\n      return saveToLocalStorage(\n        'todos',\n        todos.filter((todo) => todo.id !== payload.id),\n      );\n\n    case 'UPDATE_TODO':\n      return saveToLocalStorage(\n        'todos',\n        todos.map((todo) => (todo.id === payload.id ? { ...todo, value: payload.value } : todo)),\n      );\n\n    case 'TOGGLE_TODO':\n      return saveToLocalStorage('todos', toggleTodo(todos, payload.id));\n\n    case 'CLEAR_COMPLETED_TODOS':\n      return saveToLocalStorage(\n        'todos',\n        todos.filter((todo) => todo.isCompleted === false),\n      );\n\n    case 'REORDER_TODOS':\n      return saveToLocalStorage(\n        'todos',\n        reorderTodos(todos, payload.sourceIndex, payload.destinationIndex),\n      );\n\n    default:\n      return todos;\n  }\n}\n\nfunction toggleTodo(todos, id) {\n  let todoIndex;\n  const foundTodo = todos.find((todo, index) => {\n    todoIndex = index;\n    return todo.id === id;\n  });\n  foundTodo.isCompleted = !foundTodo.isCompleted;\n\n  const todoCopy = [...todos];\n  todoCopy.splice(todoIndex, 1);\n  todoCopy.push(foundTodo);\n  return todoCopy;\n}\n\nfunction reorderTodos(todos, sourceIndex, destinationIndex) {\n  const todoCopy = [...todos];\n  todoCopy.splice(sourceIndex, 1);\n  todoCopy.splice(destinationIndex, 0, todos[sourceIndex]);\n\n  return todoCopy;\n}\n","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer';\nimport darkModeReducer from './darkModeReducer';\n\nexport default combineReducers({ todos: todoReducer, isDarkMode: darkModeReducer });\n","import { getFromLocalStorage, saveToLocalStorage } from '../utils';\n\nexport default function todoReducer(isDarkMode = getFromLocalStorage('isDarkMode') || false, action) {\n  if (action.type === 'TOGGLE_DARK_MODE') {\n    return saveToLocalStorage('isDarkMode', !isDarkMode);\n  }\n\n  return isDarkMode;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport reducers from './reducers';\n\nReactDOM.render(\n  <Provider store={createStore(reducers)}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}